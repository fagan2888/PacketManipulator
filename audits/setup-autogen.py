#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2008 Adriano Monteiro Marques
#
# Author: Francesco Piccinno <stack.box@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

import os
import sys
import shutil

from glob import glob
from optparse import OptionParser

export_path = os.path.dirname(os.path.abspath('.'))
sys.path.insert(0, export_path)
os.putenv('PYTHONPATH', '%s%s%s' % (export_path, os.pathsep,
                                    os.getenv('PYTHONPATH', '')))

setup_autogen = """#!/usr/bin/env python
# This file is auto generated by setup-autogen.py

from umit.pm.gui.plugins.containers import setup

setup(
    name='%name%',
    version='%version%',
    author=%authors%,
    license=%licenses%,
    copyright=%copyrights%,
    url='%url%',
    scripts=['sources/%start_file_path%'],
    start_file='%start_file%',
    data_files=%data_files%,
    need=%needs%,
    provide=%provides%,
    conflict=%conflicts%,
    description='%description%',
    output='%outfile%',
"""

class Autogen(object):
    def __init__(self, path, options):
        self.url = options.url or 'http://blog.archpwn.org'
        self.version = options.version
        self.licenses = options.licenses.split(',')
        self.authors = options.authors.split(',')
        self.copyright = options.copyrights.split(',')

        self.cwd = os.getcwd()
        self.outpath = os.path.abspath(options.outpath or 'compiled')

        if not os.path.exists(self.outpath):
            os.mkdir(self.outpath)

        for root, dirs, files in os.walk(path):
            for file in files:
                if options.build and file == 'setup.py':
                    self._build_audit(root)
                elif not options.build and file == 'main.py':
                    self._create_setup(root)

    def _build_audit(self, path):
        print 'Building %s' % path

        os.chdir(path)

        if os.name == 'nt':
            os.system('python setup.py build_ext -c mingw32 install')
        else:
            os.system('python setup.py install')

        for plugin in glob('*.ump'):
            dest = os.path.join(self.outpath, os.path.basename(plugin))

            if os.path.isfile(dest):
                os.remove(dest)

            shutil.move(plugin, dest)

        os.chdir(self.cwd)

    def _create_setup(self, path):
        sys.path.insert(0, path)
        mod = __import__('main')
        sys.path.remove(path)
        del sys.modules['main']

        plugin_name = mod.__plugins__[0].__name__

        out = setup_autogen
        data = os.path.join(os.path.dirname(path), 'data')
        data_files = []

        if os.path.isdir(data):
            files = map(lambda x: 'data' + os.sep + x,
                        filter(lambda x: x[0] != '.', os.listdir(data)))
            data_files.append(('data', files))

        out = out.replace('%data_files%', str(data_files))

        out = out.replace('%name%', plugin_name)
        out = out.replace('%copyrights%', str(self.copyright))
        out = out.replace('%licenses%', str(self.licenses))
        out = out.replace('%description%', '%s plugin.' % plugin_name)
        out = out.replace('%outfile%', plugin_name.lower() + '.ump')

        out = out.replace('%version%', str(self.version))
        out = out.replace('%authors%', str(self.authors))
        out = out.replace('%url%', self.url)

        out = out.replace('%start_file%', os.path.basename(mod.__file__).rsplit('.', 1)[0])
        out = out.replace('%start_file_path%', os.path.basename(mod.__file__).replace('.pyc', '.py'))

        replaced = False

        if getattr(mod, '__plugins_deps__', None):
            for dep_name, needs, provides, conflicts in mod.__plugins_deps__:
                if plugin_name != dep_name:
                    continue

                out = out.replace('%needs%', str(needs))
                out = out.replace('%provides%', str(provides))
                out = out.replace('%conflicts%', str(conflicts))

                replaced = True
                break

        if not replaced:
            out = out.replace('%needs%', '[]')
            out = out.replace('%provides%', '[]')
            out = out.replace('%conflicts%', '[]')

        audit_type = getattr(mod, '__audit_type__', -1)

        if audit_type != -1:
            print "Writing audit part .."
            out += '    audit_type=%d,\n' % audit_type

            def add(mod, elem):
                e = getattr(mod, '__' + elem + '__', None)
                if e:
                    return '    %s=%s,\n' % (elem, repr(e))
                return ''

            for elem in ('protocols', 'references',
                         'configurations', 'vulnerabilities'):
                out += add(mod, elem)

        out += ')'

        outfile = os.path.join(os.path.dirname(path), 'setup.py')
        print "Writing %s" % outfile

        f = open(outfile, 'w')
        f.write(out)
        f.close()

if __name__ == '__main__':
    optparse = OptionParser(usage='%s [options] <path>' % sys.argv[0])
    optparse.add_option('-u', '--url', default='', dest='url', help='Homepage of your plugin')
    optparse.add_option('-l', '--licenses', default='GPL', dest='licenses', help='Licenses separated by a \',\'')
    optparse.add_option('-a', '--authors', default='Francesco Piccinno', dest='authors', help='Authors separated by a \',\'')
    optparse.add_option('-c', '--copyright', default='2009 Adriano Monteiro Marques', dest='copyrights', help='Copyright string')
    optparse.add_option('-v', '--version', default='1.0', dest='version', help='Version string')
    optparse.add_option('-b', '--build', action='store_true', dest='build', help='Set it to build audits')
    optparse.add_option('-o', '--outpath', default='compiled', dest='outpath', help='Output path')

    options, args = optparse.parse_args()

    if args:
        Autogen(args[0], options)
    else:
        optparse.print_help()
